@page "/forecast"

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@attribute [Authorize]


<PageTitle>Forecasts</PageTitle>

<h1>Forecasts</h1>

<p>This component demonstrates showing data receiving from REST API.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Fahrenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    [Inject(Key = "SecondApi")]
    public HttpClient Http { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, "api/WeatherForecast");
            // var tokenResult = await TokenProvider.RequestAccessToken();
            // tokenResult.TryGetToken(out var token);
            // var authHeader = new AuthenticationHeaderValue("Bearer", token!.Value);
            // requestMessage.Headers.Authorization = authHeader;
            // HttpResponseMessage response = await Http.SendAsync(requestMessage);
            // response.EnsureSuccessStatusCode();
            // forecast = await response.Content.ReadFromJsonAsync<Forecast[]>();
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("api/WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            Console.WriteLine(exception);
            // Если токен недоступен (сессия истекла), перенаправляем на логин
            exception.Redirect();
        }
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}
